#!/usr/bin/python
#
# Copyright (c) 2016 Catalyst.net Ltd
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
#

"""Work out what configuration is required to get a VLAN from one place to
another, based on CDP data. Michael Fincham <michael.fincham@catalyst.net.nz>."""

import argparse
import collections

def bfs_paths(graph, start, goal):
    queue = [(start, [start])]
    while queue:
        (vertex, path) = queue.pop(0)
        for next in set(graph[vertex].keys()) - set(path):
            if next == goal:
                yield path + [next]
            else:
                queue.append((next, path + [next]))

if __name__ == "__main__":
    CDP_PATH="cdp-cache"

    parser = argparse.ArgumentParser(
        formatter_class=argparse.RawDescriptionHelpFormatter,
        description=__doc__,
        epilog="""\


`from' and `to' should be given in one of these formats:

  device,port,tagged or untagged,platform

  or

  device

Multiple `from' and `to' specifications may be given, separated by
spaces. If only `device' is given, it is assumed to be a Cisco device
and no port need be configured.

For example:

  --from="tor10-20-30,GigabitEthernet1/20,untagged,cisco" \\
  --to="colo-edge-firewall1 colo-edge-firewall2" \\
  --vlan=123

Will attempt to build a VLAN from the switch called `tor10-20-30',
untagged on GigabitEthernet1/20 to both colocation firewalls.

`cisco' and `ubuntu' are currently the only supported platforms.

The `cdp-cache' file may be generated using RANCID:

  clogin -c "show cdp ne d | inc (---|e ID|Port|Platform)" router [router...] > cdp-cache

Future versions will use SNMP to discover this, and maintain a local
cache automatically.
"""
    )
    parser.add_argument('--from', dest="from_list", help='port or device definitions to plumb from', required=True)
    parser.add_argument('--to', dest="to_list", help='port or device definitions to plumb to', required=True)
    parser.add_argument('--vlan', type=int, help='VLAN ID to use', required=True)
    parser.add_argument('--cdp-cache', metavar="PATH", default=CDP_PATH, help='file where CDP cache information is stored, defaults to \'%s\'' % CDP_PATH)
    parser._optionals.title = "arguments"
    args = parser.parse_args()

    vlan = args.vlan

    hosts = collections.defaultdict(lambda: collections.defaultdict(list))
    configurations = collections.defaultdict(set)
    templates = collections.defaultdict(dict)
    platforms = {}

    local_hostname = "unknown"
    remote_hostname = "unknown"
    local_port = "unknown"
    remote_port = "unknown"
    platform = "unknown"

    with open(args.cdp_cache, 'r') as fp:
        for line in fp:
            line = line.lower().strip()
            if line.startswith("spawn ssh "):
                local_hostname = line.split()[-1]
            if line.startswith("device id: "):
                remote_hostname = " ".join(line.split()[2:])
            if line.startswith("platform: "):
                platform = line.split()[1].lower()
                platforms[remote_hostname] = platform
                platforms[remote_hostname.split('.')[0]] = platform
            if line.startswith("interface: "):
                parts = line.split(',')
                local_port = " ".join(parts[0].split()[1:])
                remote_port = " ".join(parts[1].split()[4:])

                hosts[local_hostname][remote_hostname].append((local_port, remote_port))
                hosts[local_hostname][remote_hostname.split('.')[0]].append((local_port, remote_port))

    templates['cisco'][True] =  """interface {}
  switchport trunk allowed vlan add {}"""

    templates['cisco'][False] =  """interface {}
  switchport access vlan {}
  switchport mode access
  spanning-tree portfast
  description Insert description of VLAN here"""

    templates['ubuntu'][True] =  """auto {0}.{1}
iface {0}.{1} inet static
    address xxx.xxx.xxx.xxx
    netmask yyy.yyy.yyy.yyy
    description Insert description of VLAN here
"""

    templates['ubuntu'][False] =  """auto {0}
iface {0} inet static
    address xxx.xxx.xxx.xxx
    netmask yyy.yyy.yyy.yyy
    description Insert description of VLAN here
"""

    for from_list in args.from_list.lower().split():
        for to_list in args.to_list.lower().split():
            if ',' in from_list:
                from_device, from_port, from_tagged, from_platform = from_list.split(',')
            else:
                from_device = from_list
                from_port = ""
                from_tagged = True
                from_platform = "cisco"

            if ',' in to_list:
                to_device, to_port, to_tagged, to_platform = to_list.split(',')
            else:
                to_device = to_list
                to_port = ""
                to_tagged = True
                to_platform = "cisco"

            to_tagged = True if to_tagged == "tagged" or to_tagged is True else False
            from_tagged = True if from_tagged == "tagged" or from_tagged is True else False

            print(
                "Plumbing VLAN %i from %s%s (%s) to %s%s (%s)..." %(
                    vlan,
                    from_device,
                    (" %s" % from_port if len(from_port) else ""),
                    ("tagged" if from_tagged else "untagged"),
                    to_device,
                    (" %s" % to_port if len(to_port) else ""),
                    ("tagged" if to_tagged else "untagged"),
                )
            )

            print("")

            shortest_path_length = 0
            shortest_paths = []

            for path in bfs_paths(hosts, from_device, to_device):
                if shortest_path_length == 0:
                    shortest_path_length = len(path)
                if len(path) > shortest_path_length:
                    break

                shortest_paths.append(path)

            print(
                "Found %i shortest path%s:" % (
                    len(shortest_paths),
                    ("s" if len(shortest_paths) > 1 else ""),
                )
            )

            # find all the in-between configs
            for path in shortest_paths:
                print(" -> ".join(path))
                for host_index in range(len(path)-1):
                    local_host = path[host_index]
                    remote_host = path[host_index+1]
                    port_pairs = hosts[local_host][remote_host]

                    for local_port, remote_port in port_pairs:
                        configurations[local_host].add(templates[platforms[local_host]][True].format(local_port, vlan))
                        configurations[remote_host].add(templates[platforms[remote_host]][True].format(remote_port, vlan))
            print("")
            # and the endpoint configs
            if from_port:
                configurations[from_device].add(templates[from_platform][from_tagged].format(from_port, vlan))
            if to_port:
                configurations[to_device].add(templates[to_platform][to_tagged].format(to_port, vlan))

    print("Configurations to apply:")
    print("")

    for switch, configuration in iter(sorted(configurations.iteritems())):
        print(switch)
        print('-' * len(switch))
        print("\n".join(configuration).strip())
        print("")
